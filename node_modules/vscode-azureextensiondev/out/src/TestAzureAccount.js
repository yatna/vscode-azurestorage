"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_resource_1 = require("azure-arm-resource");
const ms_rest_azure_1 = require("ms-rest-azure");
const nonNull_1 = require("./utils/nonNull");
class TestAzureAccount {
    constructor(vscode) {
        this.status = 'LoggedOut';
        this.sessions = [];
        this.subscriptions = [];
        this.filters = [];
        this._onStatusChangedEmitter = new vscode.EventEmitter();
        this.onStatusChanged = this._onStatusChangedEmitter.event;
        this._onFiltersChangedEmitter = new vscode.EventEmitter();
        this.onFiltersChanged = this._onFiltersChangedEmitter.event;
        this._onSessionsChangedEmitter = new vscode.EventEmitter();
        this.onSessionsChanged = this._onSessionsChangedEmitter.event;
        this._onSubscriptionsChangedEmitter = new vscode.EventEmitter();
        this.onSubscriptionsChanged = this._onSubscriptionsChangedEmitter.event;
    }
    signIn() {
        return __awaiter(this, void 0, void 0, function* () {
            const clientId = process.env.SERVICE_PRINCIPAL_CLIENT_ID;
            const secret = process.env.SERVICE_PRINCIPAL_SECRET;
            const domain = process.env.SERVICE_PRINCIPAL_DOMAIN;
            if (!clientId || !secret || !domain) {
                throw new Error('TestAzureAccount cannot be used without the following environment variables: SERVICE_PRINCIPAL_CLIENT_ID, SERVICE_PRINCIPAL_SECRET, SERVICE_PRINCIPAL_DOMAIN');
            }
            this.changeStatus('LoggingIn');
            const credentials = (yield ms_rest_azure_1.loginWithServicePrincipalSecret(clientId, secret, domain));
            const subscriptionClient = new azure_arm_resource_1.SubscriptionClient(credentials);
            const subscriptions = yield subscriptionClient.subscriptions.list();
            // returns an array with id, subscriptionId, displayName
            const tenants = yield subscriptionClient.tenants.list();
            const tenantId = nonNull_1.nonNullProp(nonNull_1.nonNullValue(tenants[0]), 'id');
            const session = {
                environment: credentials.environment,
                userId: '',
                tenantId: tenantId,
                credentials: credentials
            };
            const testAzureSubscription = { session: session, subscription: nonNull_1.nonNullValue(subscriptions[0]) };
            this.subscriptions.push(testAzureSubscription);
            this.changeStatus('LoggedIn');
            this.changeFilter(testAzureSubscription);
        });
    }
    signOut() {
        this.changeStatus('LoggedOut');
        this.changeFilter();
        this.subscriptions = [];
    }
    getSubscriptionContext() {
        this.verifySubscription();
        const info = this.subscriptions[0];
        return {
            credentials: info.session.credentials,
            subscriptionDisplayName: nonNull_1.nonNullProp(info.subscription, 'displayName'),
            subscriptionId: nonNull_1.nonNullProp(info.subscription, 'subscriptionId'),
            subscriptionPath: nonNull_1.nonNullProp(info.subscription, 'id'),
            tenantId: info.session.tenantId,
            userId: info.session.userId,
            environment: info.session.environment
        };
    }
    waitForLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    waitForSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    waitForFilters() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    changeStatus(newStatus) {
        this.status = newStatus;
        this._onStatusChangedEmitter.fire(this.status);
    }
    changeFilter(newFilter) {
        if (newFilter) {
            this.filters.push(newFilter);
        }
        else {
            this.filters = [];
        }
        this._onFiltersChangedEmitter.fire();
    }
    verifySubscription() {
        if (this.subscriptions.length === 0) {
            const noSubscription = 'No subscription found.  Invoke TestAzureAccount.signIn().';
            throw new Error(noSubscription);
        }
    }
}
exports.TestAzureAccount = TestAzureAccount;
//# sourceMappingURL=TestAzureAccount.js.map