/**
 * This is a helper class to construct a string representing the NTFS attributes to a file or directory.
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file#file-system-attributes
 *
 * @export
 * @class FileSystemAttributes
 */
var FileSystemAttributes = /** @class */ (function () {
    function FileSystemAttributes() {
        /**
         * Specifies a directory or file that is read-only.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.readonly = false;
        /**
         * Specifies a directory or file is hidden.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.hidden = false;
        /**
         * Specifies a directory or file that the operating system uses a part of, or uses exclusively.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.system = false;
        /**
         * Specifies a directory or file that does not have other attributes set. This attribute is valid only when used alone.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.none = false;
        /**
         * Specifies the handle identifies a directory.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.directory = false;
        /**
         * Specifies a directory or file is an archive. Applications typically use this attribute to mark files for backup or removal.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.archive = false;
        /**
         * Specifies if a file is temporary.
         */
        this.temporary = false;
        /**
         * Specifies the data of a directory or file is not available immediately.
         * This file system attribute is presented primarily to provide compatibility with Windows - Azure Files does not support with offline storage options.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.offline = false;
        /**
         * Specifies the directory or file is not to be indexed by the content indexing service.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.notContentIndexed = false;
        /**
         * Specifies the user data stream not to be read by the background data integrity scanner.
         * This file system attribute is presented primarily to provide compatibility with Windows.
         * Applicable to directory or file.
         *
         * @type {boolean}
         * @memberof FileSystemAttributes
         */
        this.noScrubData = false;
    }
    /**
     * Creates a FileSystemAttributes from the specified attributes string. This method will throw an
     * Error if it encounters a string that does not correspond to a valid attributes.
     *
     * @static
     * @param {string} fileAttributes The value of header x-ms-file-attributes.
     * @returns {FileSystemAttributes}
     * @memberof FileSystemAttributes
     */
    FileSystemAttributes.parse = function (fileAttributes) {
        if (!fileAttributes) {
            throw new RangeError("Invalid fileAttributes: '" + fileAttributes + "'.");
        }
        var fileSystemAttributes = new FileSystemAttributes();
        var attributes = fileAttributes.trim().split('|');
        for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
            var str = attributes_1[_i];
            str = str.trim();
            switch (str) {
                case "ReadOnly":
                    fileSystemAttributes.readonly = true;
                    break;
                case "Hidden":
                    fileSystemAttributes.hidden = true;
                    break;
                case "System":
                    fileSystemAttributes.system = true;
                    break;
                case "None":
                    fileSystemAttributes.none = true;
                    break;
                case "Temporary":
                    fileSystemAttributes.temporary = true;
                    break;
                case "Offline":
                    fileSystemAttributes.offline = true;
                    break;
                case "Directory":
                    fileSystemAttributes.directory = true;
                    break;
                case "Archive":
                    fileSystemAttributes.archive = true;
                    break;
                case "NotContentIndexed":
                    fileSystemAttributes.notContentIndexed = true;
                    break;
                case "NoScrubData":
                    fileSystemAttributes.noScrubData = true;
                    break;
                default:
                    throw new RangeError("Invalid attribute: " + str);
            }
        }
        return fileSystemAttributes;
    };
    /**
     * Converts the given attributes to a string.
     *
     * @returns {string} A string which represents the FileSystemAttributes
     * @memberof FileSystemAttributes
     */
    FileSystemAttributes.prototype.toString = function () {
        var attributes = [];
        if (this.readonly) {
            attributes.push("ReadOnly");
        }
        if (this.hidden) {
            attributes.push("Hidden");
        }
        if (this.system) {
            attributes.push("System");
        }
        if (this.none) {
            attributes.push("None");
        }
        if (this.temporary) {
            attributes.push("Temporary");
        }
        if (this.directory) {
            attributes.push("Directory");
        }
        if (this.archive) {
            attributes.push("Archive");
        }
        if (this.offline) {
            attributes.push("Offline");
        }
        if (this.notContentIndexed) {
            attributes.push("NotContentIndexed");
        }
        if (this.noScrubData) {
            attributes.push("NoScrubData");
        }
        return attributes.join("|");
    };
    return FileSystemAttributes;
}());
export { FileSystemAttributes };
//# sourceMappingURL=FileSystemAttributes.js.map