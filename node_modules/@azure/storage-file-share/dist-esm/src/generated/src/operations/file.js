/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/fileMappers";
import * as Parameters from "../models/parameters";
/** Class representing a File. */
var File = /** @class */ (function () {
    /**
     * Create a File.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function File(client) {
        this.client = client;
    }
    File.prototype.create = function (fileContentLength, fileAttributes, fileCreatedOn, fileLastWriteOn, options, callback) {
        return this.client.sendOperationRequest({
            fileContentLength: fileContentLength,
            fileAttributes: fileAttributes,
            fileCreatedOn: fileCreatedOn,
            fileLastWriteOn: fileLastWriteOn,
            options: options
        }, createOperationSpec, callback);
    };
    File.prototype.download = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, downloadOperationSpec, callback);
    };
    File.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    File.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    File.prototype.setHTTPHeaders = function (fileAttributes, fileCreatedOn, fileLastWriteOn, options, callback) {
        return this.client.sendOperationRequest({
            fileAttributes: fileAttributes,
            fileCreatedOn: fileCreatedOn,
            fileLastWriteOn: fileLastWriteOn,
            options: options
        }, setHTTPHeadersOperationSpec, callback);
    };
    File.prototype.setMetadata = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setMetadataOperationSpec, callback);
    };
    File.prototype.acquireLease = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, acquireLeaseOperationSpec, callback);
    };
    File.prototype.releaseLease = function (leaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            options: options
        }, releaseLeaseOperationSpec, callback);
    };
    File.prototype.changeLease = function (leaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            options: options
        }, changeLeaseOperationSpec, callback);
    };
    File.prototype.breakLease = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, breakLeaseOperationSpec, callback);
    };
    File.prototype.uploadRange = function (range, fileRangeWrite, contentLength, options, callback) {
        return this.client.sendOperationRequest({
            range: range,
            fileRangeWrite: fileRangeWrite,
            contentLength: contentLength,
            options: options
        }, uploadRangeOperationSpec, callback);
    };
    File.prototype.uploadRangeFromURL = function (range, copySource, contentLength, options, callback) {
        return this.client.sendOperationRequest({
            range: range,
            copySource: copySource,
            contentLength: contentLength,
            options: options
        }, uploadRangeFromURLOperationSpec, callback);
    };
    File.prototype.getRangeList = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getRangeListOperationSpec, callback);
    };
    File.prototype.startCopy = function (copySource, options, callback) {
        return this.client.sendOperationRequest({
            copySource: copySource,
            options: options
        }, startCopyOperationSpec, callback);
    };
    File.prototype.abortCopy = function (copyId, options, callback) {
        return this.client.sendOperationRequest({
            copyId: copyId,
            options: options
        }, abortCopyOperationSpec, callback);
    };
    File.prototype.listHandles = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listHandlesOperationSpec, callback);
    };
    File.prototype.forceCloseHandles = function (handleId, options, callback) {
        return this.client.sendOperationRequest({
            handleId: handleId,
            options: options
        }, forceCloseHandlesOperationSpec, callback);
    };
    return File;
}());
export { File };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.fileContentLength0,
        Parameters.fileTypeConstant,
        Parameters.metadata,
        Parameters.filePermission,
        Parameters.filePermissionKey1,
        Parameters.fileAttributes0,
        Parameters.fileCreatedOn,
        Parameters.fileLastWriteOn,
        Parameters.fileContentType,
        Parameters.fileContentEncoding,
        Parameters.fileContentLanguage,
        Parameters.fileCacheControl,
        Parameters.fileContentMD5,
        Parameters.fileContentDisposition,
        Parameters.leaseId0
    ],
    responses: {
        201: {
            headersMapper: Mappers.FileCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileCreateHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var downloadOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.range0,
        Parameters.rangeGetContentMD5,
        Parameters.leaseId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: Mappers.FileDownloadHeaders
        },
        206: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: Mappers.FileDownloadHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileDownloadHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "HEAD",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.shareSnapshot,
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.leaseId0
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileGetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.leaseId0
    ],
    responses: {
        202: {
            headersMapper: Mappers.FileDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileDeleteHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setHTTPHeadersOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp0
    ],
    headerParameters: [
        Parameters.version,
        Parameters.fileContentLength1,
        Parameters.filePermission,
        Parameters.filePermissionKey1,
        Parameters.fileAttributes0,
        Parameters.fileCreatedOn,
        Parameters.fileLastWriteOn,
        Parameters.fileContentType,
        Parameters.fileContentEncoding,
        Parameters.fileContentLanguage,
        Parameters.fileCacheControl,
        Parameters.fileContentMD5,
        Parameters.fileContentDisposition,
        Parameters.leaseId0
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileSetHTTPHeadersHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSetHTTPHeadersHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp4
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version,
        Parameters.leaseId0
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileSetMetadataHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSetMetadataHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var acquireLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp9
    ],
    headerParameters: [
        Parameters.duration,
        Parameters.proposedLeaseId,
        Parameters.version,
        Parameters.requestId,
        Parameters.action0
    ],
    responses: {
        201: {
            headersMapper: Mappers.FileAcquireLeaseHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileAcquireLeaseHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var releaseLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp9
    ],
    headerParameters: [
        Parameters.leaseId1,
        Parameters.version,
        Parameters.requestId,
        Parameters.action1
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileReleaseLeaseHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileReleaseLeaseHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var changeLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp9
    ],
    headerParameters: [
        Parameters.leaseId1,
        Parameters.proposedLeaseId,
        Parameters.version,
        Parameters.requestId,
        Parameters.action2
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileChangeLeaseHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileChangeLeaseHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var breakLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp9
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId,
        Parameters.action3,
        Parameters.leaseId0
    ],
    responses: {
        202: {
            headersMapper: Mappers.FileBreakLeaseHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileBreakLeaseHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var uploadRangeOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp10
    ],
    headerParameters: [
        Parameters.range1,
        Parameters.fileRangeWrite,
        Parameters.contentLength,
        Parameters.contentMD5,
        Parameters.version,
        Parameters.leaseId0
    ],
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: {
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        201: {
            headersMapper: Mappers.FileUploadRangeHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileUploadRangeHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var uploadRangeFromURLOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp10
    ],
    headerParameters: [
        Parameters.range1,
        Parameters.copySource,
        Parameters.sourceRange,
        Parameters.fileRangeWriteFromUrl,
        Parameters.contentLength,
        Parameters.sourceContentCrc64,
        Parameters.version,
        Parameters.sourceIfMatchCrc64,
        Parameters.sourceIfNoneMatchCrc64,
        Parameters.leaseId0
    ],
    responses: {
        201: {
            headersMapper: Mappers.FileUploadRangeFromURLHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileUploadRangeFromURLHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getRangeListOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.shareSnapshot,
        Parameters.timeoutInSeconds,
        Parameters.comp11
    ],
    headerParameters: [
        Parameters.version,
        Parameters.range0,
        Parameters.leaseId0
    ],
    responses: {
        200: {
            bodyMapper: {
                xmlElementName: "Range",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Range"
                        }
                    }
                }
            },
            headersMapper: Mappers.FileGetRangeListHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileGetRangeListHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var startCopyOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.metadata,
        Parameters.copySource,
        Parameters.filePermission,
        Parameters.filePermissionKey1,
        Parameters.filePermissionCopyMode,
        Parameters.ignoreReadOnly,
        Parameters.fileAttributes1,
        Parameters.fileCreationTime,
        Parameters.fileLastWriteTime,
        Parameters.setArchiveAttribute,
        Parameters.leaseId0
    ],
    responses: {
        202: {
            headersMapper: Mappers.FileStartCopyHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileStartCopyHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var abortCopyOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.copyId,
        Parameters.timeoutInSeconds,
        Parameters.comp12
    ],
    headerParameters: [
        Parameters.copyActionAbortConstant,
        Parameters.version,
        Parameters.leaseId0
    ],
    responses: {
        204: {
            headersMapper: Mappers.FileAbortCopyHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileAbortCopyHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var listHandlesOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.marker,
        Parameters.maxResults,
        Parameters.timeoutInSeconds,
        Parameters.shareSnapshot,
        Parameters.comp7
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListHandlesResponse,
            headersMapper: Mappers.FileListHandlesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileListHandlesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var forceCloseHandlesOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}/{fileName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.marker,
        Parameters.shareSnapshot,
        Parameters.comp8
    ],
    headerParameters: [
        Parameters.handleId,
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileForceCloseHandlesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileForceCloseHandlesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=file.js.map