/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/shareMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Share. */
var Share = /** @class */ (function () {
    /**
     * Create a Share.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Share(client) {
        this.client = client;
    }
    Share.prototype.create = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createOperationSpec, callback);
    };
    Share.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Share.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Share.prototype.createSnapshot = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createSnapshotOperationSpec, callback);
    };
    Share.prototype.createPermission = function (sharePermission, options, callback) {
        return this.client.sendOperationRequest({
            sharePermission: sharePermission,
            options: options
        }, createPermissionOperationSpec, callback);
    };
    Share.prototype.getPermission = function (filePermissionKey, options, callback) {
        return this.client.sendOperationRequest({
            filePermissionKey: filePermissionKey,
            options: options
        }, getPermissionOperationSpec, callback);
    };
    Share.prototype.setQuota = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setQuotaOperationSpec, callback);
    };
    Share.prototype.setMetadata = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setMetadataOperationSpec, callback);
    };
    Share.prototype.getAccessPolicy = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccessPolicyOperationSpec, callback);
    };
    Share.prototype.setAccessPolicy = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setAccessPolicyOperationSpec, callback);
    };
    Share.prototype.getStatistics = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getStatisticsOperationSpec, callback);
    };
    return Share;
}());
export { Share };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.quota,
        Parameters.version
    ],
    responses: {
        201: {
            headersMapper: Mappers.ShareCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareCreateHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.shareSnapshot,
        Parameters.timeoutInSeconds,
        Parameters.restype1
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.ShareGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareGetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.shareSnapshot,
        Parameters.timeoutInSeconds,
        Parameters.restype1
    ],
    headerParameters: [
        Parameters.version,
        Parameters.deleteSnapshots
    ],
    responses: {
        202: {
            headersMapper: Mappers.ShareDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareDeleteHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var createSnapshotOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp2
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version
    ],
    responses: {
        201: {
            headersMapper: Mappers.ShareCreateSnapshotHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareCreateSnapshotHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var createPermissionOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp3
    ],
    headerParameters: [
        Parameters.version
    ],
    requestBody: {
        parameterPath: "sharePermission",
        mapper: __assign(__assign({}, Mappers.SharePermission), { required: true })
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        201: {
            headersMapper: Mappers.ShareCreatePermissionHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareCreatePermissionHeaders
        }
    },
    isXML: false,
    serializer: serializer
};
var getPermissionOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp3
    ],
    headerParameters: [
        Parameters.filePermissionKey0,
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SharePermission,
            headersMapper: Mappers.ShareGetPermissionHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareGetPermissionHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setQuotaOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp0
    ],
    headerParameters: [
        Parameters.version,
        Parameters.quota
    ],
    responses: {
        200: {
            headersMapper: Mappers.ShareSetQuotaHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareSetQuotaHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp4
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.ShareSetMetadataHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareSetMetadataHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccessPolicyOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp5
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: {
                xmlElementName: "SignedIdentifier",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SignedIdentifier"
                        }
                    }
                }
            },
            headersMapper: Mappers.ShareGetAccessPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareGetAccessPolicyHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setAccessPolicyOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp5
    ],
    headerParameters: [
        Parameters.version
    ],
    requestBody: {
        parameterPath: [
            "options",
            "shareAcl"
        ],
        mapper: {
            xmlName: "SignedIdentifiers",
            xmlElementName: "SignedIdentifier",
            serializedName: "shareAcl",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "SignedIdentifier"
                    }
                }
            }
        }
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        200: {
            headersMapper: Mappers.ShareSetAccessPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareSetAccessPolicyHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getStatisticsOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype1,
        Parameters.comp6
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ShareStats,
            headersMapper: Mappers.ShareGetStatisticsHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ShareGetStatisticsHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=share.js.map