/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/directoryMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Directory. */
var Directory = /** @class */ (function () {
    /**
     * Create a Directory.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Directory(client) {
        this.client = client;
    }
    Directory.prototype.create = function (fileAttributes, fileCreatedOn, fileLastWriteOn, options, callback) {
        return this.client.sendOperationRequest({
            fileAttributes: fileAttributes,
            fileCreatedOn: fileCreatedOn,
            fileLastWriteOn: fileLastWriteOn,
            options: options
        }, createOperationSpec, callback);
    };
    Directory.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Directory.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Directory.prototype.setProperties = function (fileAttributes, fileCreatedOn, fileLastWriteOn, options, callback) {
        return this.client.sendOperationRequest({
            fileAttributes: fileAttributes,
            fileCreatedOn: fileCreatedOn,
            fileLastWriteOn: fileLastWriteOn,
            options: options
        }, setPropertiesOperationSpec, callback);
    };
    Directory.prototype.setMetadata = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setMetadataOperationSpec, callback);
    };
    Directory.prototype.listFilesAndDirectoriesSegment = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listFilesAndDirectoriesSegmentOperationSpec, callback);
    };
    Directory.prototype.listHandles = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listHandlesOperationSpec, callback);
    };
    Directory.prototype.forceCloseHandles = function (handleId, options, callback) {
        return this.client.sendOperationRequest({
            handleId: handleId,
            options: options
        }, forceCloseHandlesOperationSpec, callback);
    };
    return Directory;
}());
export { Directory };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype2
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version,
        Parameters.filePermission,
        Parameters.filePermissionKey1,
        Parameters.fileAttributes0,
        Parameters.fileCreatedOn,
        Parameters.fileLastWriteOn
    ],
    responses: {
        201: {
            headersMapper: Mappers.DirectoryCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectoryCreateHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.shareSnapshot,
        Parameters.timeoutInSeconds,
        Parameters.restype2
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.DirectoryGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectoryGetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype2
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        202: {
            headersMapper: Mappers.DirectoryDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectoryDeleteHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setPropertiesOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype2,
        Parameters.comp0
    ],
    headerParameters: [
        Parameters.version,
        Parameters.filePermission,
        Parameters.filePermissionKey1,
        Parameters.fileAttributes0,
        Parameters.fileCreatedOn,
        Parameters.fileLastWriteOn
    ],
    responses: {
        200: {
            headersMapper: Mappers.DirectorySetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectorySetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype2,
        Parameters.comp4
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.DirectorySetMetadataHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectorySetMetadataHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var listFilesAndDirectoriesSegmentOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.prefix,
        Parameters.shareSnapshot,
        Parameters.marker,
        Parameters.maxResults,
        Parameters.timeoutInSeconds,
        Parameters.restype2,
        Parameters.comp1
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListFilesAndDirectoriesSegmentResponse,
            headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var listHandlesOperationSpec = {
    httpMethod: "GET",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.marker,
        Parameters.maxResults,
        Parameters.timeoutInSeconds,
        Parameters.shareSnapshot,
        Parameters.comp7
    ],
    headerParameters: [
        Parameters.recursive,
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListHandlesResponse,
            headersMapper: Mappers.DirectoryListHandlesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectoryListHandlesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var forceCloseHandlesOperationSpec = {
    httpMethod: "PUT",
    path: "{shareName}/{directory}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.marker,
        Parameters.shareSnapshot,
        Parameters.comp8
    ],
    headerParameters: [
        Parameters.handleId,
        Parameters.recursive,
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.DirectoryForceCloseHandlesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.DirectoryForceCloseHandlesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=directory.js.map