/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/serviceMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Service. */
var Service = /** @class */ (function () {
    /**
     * Create a Service.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Service(client) {
        this.client = client;
    }
    Service.prototype.setProperties = function (properties, options, callback) {
        return this.client.sendOperationRequest({
            properties: properties,
            options: options
        }, setPropertiesOperationSpec, callback);
    };
    Service.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Service.prototype.listSharesSegment = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listSharesSegmentOperationSpec, callback);
    };
    return Service;
}());
export { Service };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var setPropertiesOperationSpec = {
    httpMethod: "PUT",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype0,
        Parameters.comp0
    ],
    headerParameters: [
        Parameters.version
    ],
    requestBody: {
        parameterPath: "properties",
        mapper: __assign(__assign({}, Mappers.FileServiceProperties), { required: true })
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        202: {
            headersMapper: Mappers.ServiceSetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ServiceSetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.restype0,
        Parameters.comp0
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FileServiceProperties,
            headersMapper: Mappers.ServiceGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ServiceGetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var listSharesSegmentOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.prefix,
        Parameters.marker,
        Parameters.maxResults,
        Parameters.include,
        Parameters.timeoutInSeconds,
        Parameters.comp1
    ],
    headerParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListSharesResponse,
            headersMapper: Mappers.ServiceListSharesSegmentHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.ServiceListSharesSegmentHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=service.js.map