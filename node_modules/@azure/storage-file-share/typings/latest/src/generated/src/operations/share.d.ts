import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a Share. */
export declare class Share {
    private readonly client;
    /**
     * Create a Share.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * Creates a new share under the specified account. If the share with the same name already exists,
     * the operation fails.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareCreateResponse>
     */
    create(options?: Models.ShareCreateOptionalParams): Promise<Models.ShareCreateResponse>;
    /**
     * @param callback The callback
     */
    create(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    create(options: Models.ShareCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns all user-defined metadata and system properties for the specified share or share
     * snapshot. The data returned does not include the share's list of files.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareGetPropertiesResponse>
     */
    getProperties(options?: Models.ShareGetPropertiesOptionalParams): Promise<Models.ShareGetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    getProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProperties(options: Models.ShareGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Operation marks the specified share or share snapshot for deletion. The share or share snapshot
     * and any files contained within it are later deleted during garbage collection.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareDeleteResponse>
     */
    deleteMethod(options?: Models.ShareDeleteMethodOptionalParams): Promise<Models.ShareDeleteResponse>;
    /**
     * @param callback The callback
     */
    deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(options: Models.ShareDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Creates a read-only snapshot of a share.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareCreateSnapshotResponse>
     */
    createSnapshot(options?: Models.ShareCreateSnapshotOptionalParams): Promise<Models.ShareCreateSnapshotResponse>;
    /**
     * @param callback The callback
     */
    createSnapshot(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    createSnapshot(options: Models.ShareCreateSnapshotOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Create a permission (a security descriptor).
     * @param sharePermission A permission (a security descriptor) at the share level.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareCreatePermissionResponse>
     */
    createPermission(sharePermission: Models.SharePermission, options?: Models.ShareCreatePermissionOptionalParams): Promise<Models.ShareCreatePermissionResponse>;
    /**
     * @param sharePermission A permission (a security descriptor) at the share level.
     * @param callback The callback
     */
    createPermission(sharePermission: Models.SharePermission, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param sharePermission A permission (a security descriptor) at the share level.
     * @param options The optional parameters
     * @param callback The callback
     */
    createPermission(sharePermission: Models.SharePermission, options: Models.ShareCreatePermissionOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns the permission (security descriptor) for a given key
     * @param filePermissionKey Key of the permission to be set for the directory/file.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareGetPermissionResponse>
     */
    getPermission(filePermissionKey: string, options?: Models.ShareGetPermissionOptionalParams): Promise<Models.ShareGetPermissionResponse>;
    /**
     * @param filePermissionKey Key of the permission to be set for the directory/file.
     * @param callback The callback
     */
    getPermission(filePermissionKey: string, callback: coreHttp.ServiceCallback<Models.SharePermission>): void;
    /**
     * @param filePermissionKey Key of the permission to be set for the directory/file.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPermission(filePermissionKey: string, options: Models.ShareGetPermissionOptionalParams, callback: coreHttp.ServiceCallback<Models.SharePermission>): void;
    /**
     * Sets quota for the specified share.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareSetQuotaResponse>
     */
    setQuota(options?: Models.ShareSetQuotaOptionalParams): Promise<Models.ShareSetQuotaResponse>;
    /**
     * @param callback The callback
     */
    setQuota(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setQuota(options: Models.ShareSetQuotaOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Sets one or more user-defined name-value pairs for the specified share.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareSetMetadataResponse>
     */
    setMetadata(options?: Models.ShareSetMetadataOptionalParams): Promise<Models.ShareSetMetadataResponse>;
    /**
     * @param callback The callback
     */
    setMetadata(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setMetadata(options: Models.ShareSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns information about stored access policies specified on the share.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareGetAccessPolicyResponse>
     */
    getAccessPolicy(options?: Models.ShareGetAccessPolicyOptionalParams): Promise<Models.ShareGetAccessPolicyResponse>;
    /**
     * @param callback The callback
     */
    getAccessPolicy(callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getAccessPolicy(options: Models.ShareGetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;
    /**
     * Sets a stored access policy for use with shared access signatures.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareSetAccessPolicyResponse>
     */
    setAccessPolicy(options?: Models.ShareSetAccessPolicyOptionalParams): Promise<Models.ShareSetAccessPolicyResponse>;
    /**
     * @param callback The callback
     */
    setAccessPolicy(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setAccessPolicy(options: Models.ShareSetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Retrieves statistics related to the share.
     * @param [options] The optional parameters
     * @returns Promise<Models.ShareGetStatisticsResponse>
     */
    getStatistics(options?: Models.ShareGetStatisticsOptionalParams): Promise<Models.ShareGetStatisticsResponse>;
    /**
     * @param callback The callback
     */
    getStatistics(callback: coreHttp.ServiceCallback<Models.ShareStats>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getStatistics(options: Models.ShareGetStatisticsOptionalParams, callback: coreHttp.ServiceCallback<Models.ShareStats>): void;
}
//# sourceMappingURL=share.d.ts.map