import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a Directory. */
export declare class Directory {
    private readonly client;
    /**
     * Create a Directory.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * Creates a new directory under the specified share or parent directory.
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectoryCreateResponse>
     */
    create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectoryCreateOptionalParams): Promise<Models.DirectoryCreateResponse>;
    /**
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param callback The callback
     */
    create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.DirectoryCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns all system properties for the specified directory, and can also be used to check the
     * existence of a directory. The data returned does not include the files in the directory or any
     * subdirectories.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectoryGetPropertiesResponse>
     */
    getProperties(options?: Models.DirectoryGetPropertiesOptionalParams): Promise<Models.DirectoryGetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    getProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProperties(options: Models.DirectoryGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Removes the specified empty directory. Note that the directory must be empty before it can be
     * deleted.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectoryDeleteResponse>
     */
    deleteMethod(options?: Models.DirectoryDeleteMethodOptionalParams): Promise<Models.DirectoryDeleteResponse>;
    /**
     * @param callback The callback
     */
    deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(options: Models.DirectoryDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Sets properties on the directory.
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectorySetPropertiesResponse>
     */
    setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.DirectorySetPropertiesOptionalParams): Promise<Models.DirectorySetPropertiesResponse>;
    /**
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param callback The callback
     */
    setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param options The optional parameters
     * @param callback The callback
     */
    setProperties(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.DirectorySetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Updates user defined metadata for the specified directory.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectorySetMetadataResponse>
     */
    setMetadata(options?: Models.DirectorySetMetadataOptionalParams): Promise<Models.DirectorySetMetadataResponse>;
    /**
     * @param callback The callback
     */
    setMetadata(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setMetadata(options: Models.DirectorySetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns a list of files or directories under the specified share or directory. It lists the
     * contents only for a single level of the directory hierarchy.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>
     */
    listFilesAndDirectoriesSegment(options?: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams): Promise<Models.DirectoryListFilesAndDirectoriesSegmentResponse>;
    /**
     * @param callback The callback
     */
    listFilesAndDirectoriesSegment(callback: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listFilesAndDirectoriesSegment(options: Models.DirectoryListFilesAndDirectoriesSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListFilesAndDirectoriesSegmentResponse>): void;
    /**
     * Lists handles for directory.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectoryListHandlesResponse>
     */
    listHandles(options?: Models.DirectoryListHandlesOptionalParams): Promise<Models.DirectoryListHandlesResponse>;
    /**
     * @param callback The callback
     */
    listHandles(callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listHandles(options: Models.DirectoryListHandlesOptionalParams, callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;
    /**
     * Closes all handles open for given directory.
     * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)
     * is a wildcard that specifies all handles.
     * @param [options] The optional parameters
     * @returns Promise<Models.DirectoryForceCloseHandlesResponse>
     */
    forceCloseHandles(handleId: string, options?: Models.DirectoryForceCloseHandlesOptionalParams): Promise<Models.DirectoryForceCloseHandlesResponse>;
    /**
     * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)
     * is a wildcard that specifies all handles.
     * @param callback The callback
     */
    forceCloseHandles(handleId: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)
     * is a wildcard that specifies all handles.
     * @param options The optional parameters
     * @param callback The callback
     */
    forceCloseHandles(handleId: string, options: Models.DirectoryForceCloseHandlesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
}
//# sourceMappingURL=directory.d.ts.map