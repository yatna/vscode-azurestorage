import { BaseRequestPolicy, deserializationPolicy, HttpClient as IHttpClient, HttpHeaders, HttpOperationResponse, HttpRequestBody, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions, ServiceClientOptions, WebResource, ProxyOptions, UserAgentOptions, KeepAliveOptions } from "@azure/core-http";
import { Credential } from "./credentials/Credential";
import { StorageRetryOptions } from "./StorageRetryPolicyFactory";
export { deserializationPolicy, IHttpClient, HttpHeaders, HttpOperationResponse, HttpRequestBody, WebResource, BaseRequestPolicy, RequestPolicyFactory, RequestPolicy, RequestPolicyOptions };
/**
 * Option interface for Pipeline constructor.
 *
 * @export
 * @interface PipelineOptions
 */
export interface PipelineOptions {
    /**
     * Optional. Configures the HTTP client to send requests and receive responses.
     *
     * @type {IHttpClient}
     * @memberof PipelineOptions
     */
    httpClient?: IHttpClient;
}
/**
 * A Pipeline class containing HTTP request policies.
 * You can create a default Pipeline by calling {@link newPipeline}.
 * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
 *
 * Refer to {@link newPipeline} and provided policies as reference before
 * implementing your customized Pipeline.
 *
 * @export
 * @class Pipeline
 */
export declare class Pipeline {
    /**
     * A list of chained request policy factories.
     *
     * @type {RequestPolicyFactory[]}
     * @memberof Pipeline
     */
    readonly factories: RequestPolicyFactory[];
    /**
     * Configures pipeline logger and HTTP client.
     *
     * @type {PipelineOptions}
     * @memberof Pipeline
     */
    readonly options: PipelineOptions;
    /**
     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
     *
     * @param {RequestPolicyFactory[]} factories
     * @param {PipelineOptions} [options={}]
     * @memberof Pipeline
     */
    constructor(factories: RequestPolicyFactory[], options?: PipelineOptions);
    /**
     * Transfer Pipeline object to ServiceClientOptions object which required by
     * ServiceClient constructor.
     *
     * @returns {ServiceClientOptions} The ServiceClientOptions object from this Pipeline.
     * @memberof Pipeline
     */
    toServiceClientOptions(): ServiceClientOptions;
}
/**
 * Option interface for {@link newPipeline} function.
 *
 * @export
 * @interface StoragePipelineOptions
 */
export interface StoragePipelineOptions {
    /**
     * Options to configure a proxy for outgoing requests.
     */
    proxyOptions?: ProxyOptions;
    /**
     * Options for adding user agent details to outgoing requests.
     *
     * @type {UserAgentOptions}
     * @memberof StoragePipelineOptions
     */
    userAgentOptions?: UserAgentOptions;
    /**
     * Configures the built-in retry policy behavior.
     *
     * @type {StorageRetryOptions}
     * @memberof StoragePipelineOptions
     */
    retryOptions?: StorageRetryOptions;
    /**
     * Keep alive configurations. Default keep-alive is enabled.
     *
     * @type {KeepAliveOptions}
     * @memberof StoragePipelineOptions
     */
    keepAliveOptions?: KeepAliveOptions;
    /**
     * Configures the HTTP client to send requests and receive responses.
     *
     * @type {IHttpClient}
     * @memberof StoragePipelineOptions
     */
    httpClient?: IHttpClient;
}
/**
 * Creates a new {@link Pipeline} object with {@link Credential} provided.
 *
 * @static
 * @param {Credential} credential Such as AnonymousCredential, StorageSharedKeyCredential.
 * @param {StoragePipelineOptions} [pipelineOptions] Optional. Options.
 * @returns {Pipeline} A new Pipeline object.
 * @memberof Pipeline
 */
export declare function newPipeline(credential: Credential, pipelineOptions?: StoragePipelineOptions): Pipeline;
//# sourceMappingURL=Pipeline.d.ts.map