import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a File. */
export declare class File {
    private readonly client;
    /**
     * Create a File.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * Creates a new file or replaces a file. Note it only initializes the file with no content.
     * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileCreateResponse>
     */
    create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileCreateOptionalParams): Promise<Models.FileCreateResponse>;
    /**
     * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param callback The callback
     */
    create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param fileContentLength Specifies the maximum size for the file, up to 1 TB.
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(fileContentLength: number, fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.FileCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Reads or downloads a file from the system, including its metadata and properties.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileDownloadResponse>
     */
    download(options?: Models.FileDownloadOptionalParams): Promise<Models.FileDownloadResponse>;
    /**
     * @param callback The callback
     */
    download(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    download(options: Models.FileDownloadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
     * It does not return the content of the file.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileGetPropertiesResponse>
     */
    getProperties(options?: Models.FileGetPropertiesOptionalParams): Promise<Models.FileGetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    getProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProperties(options: Models.FileGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * removes the file from the storage account.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileDeleteResponse>
     */
    deleteMethod(options?: Models.FileDeleteMethodOptionalParams): Promise<Models.FileDeleteResponse>;
    /**
     * @param callback The callback
     */
    deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(options: Models.FileDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Sets HTTP headers on the file.
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSetHTTPHeadersResponse>
     */
    setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options?: Models.FileSetHTTPHeadersOptionalParams): Promise<Models.FileSetHTTPHeadersResponse>;
    /**
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param callback The callback
     */
    setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param fileAttributes If specified, the provided file attributes shall be set. Default value:
     * ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.
     * @param fileCreatedOn Creation time for the file/directory. Default value: Now.
     * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.
     * @param options The optional parameters
     * @param callback The callback
     */
    setHTTPHeaders(fileAttributes: string, fileCreatedOn: string, fileLastWriteOn: string, options: Models.FileSetHTTPHeadersOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Updates user-defined metadata for the specified file.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSetMetadataResponse>
     */
    setMetadata(options?: Models.FileSetMetadataOptionalParams): Promise<Models.FileSetMetadataResponse>;
    /**
     * @param callback The callback
     */
    setMetadata(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setMetadata(options: Models.FileSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * [Update] The Lease File operation establishes and manages a lock on a file for write and delete
     * operations
     * @param [options] The optional parameters
     * @returns Promise<Models.FileAcquireLeaseResponse>
     */
    acquireLease(options?: Models.FileAcquireLeaseOptionalParams): Promise<Models.FileAcquireLeaseResponse>;
    /**
     * @param callback The callback
     */
    acquireLease(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    acquireLease(options: Models.FileAcquireLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * [Update] The Lease File operation establishes and manages a lock on a file for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileReleaseLeaseResponse>
     */
    releaseLease(leaseId: string, options?: Models.FileReleaseLeaseOptionalParams): Promise<Models.FileReleaseLeaseResponse>;
    /**
     * @param leaseId Specifies the current lease ID on the resource.
     * @param callback The callback
     */
    releaseLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    releaseLease(leaseId: string, options: Models.FileReleaseLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * [Update] The Lease File operation establishes and manages a lock on a file for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileChangeLeaseResponse>
     */
    changeLease(leaseId: string, options?: Models.FileChangeLeaseOptionalParams): Promise<Models.FileChangeLeaseResponse>;
    /**
     * @param leaseId Specifies the current lease ID on the resource.
     * @param callback The callback
     */
    changeLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    changeLease(leaseId: string, options: Models.FileChangeLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * [Update] The Lease File operation establishes and manages a lock on a file for write and delete
     * operations
     * @param [options] The optional parameters
     * @returns Promise<Models.FileBreakLeaseResponse>
     */
    breakLease(options?: Models.FileBreakLeaseOptionalParams): Promise<Models.FileBreakLeaseResponse>;
    /**
     * @param callback The callback
     */
    breakLease(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    breakLease(options: Models.FileBreakLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Upload a range of bytes to a file.
     * @param range Specifies the range of bytes to be written. Both the start and end of the range
     * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear
     * operation, the range can be up to the value of the file's full size. The File service accepts
     * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be
     * specified in the following format: bytes=startByte-endByte.
     * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified
     * by the request body into the specified range. The Range and Content-Length headers must match to
     * perform the update. - Clear: Clears the specified range and releases the space used in storage
     * for that range. To clear a range, set the Content-Length header to zero, and set the Range
     * header to a value that indicates the range to clear, up to maximum file size. Possible values
     * include: 'update', 'clear'
     * @param contentLength Specifies the number of bytes being transmitted in the request body. When
     * the x-ms-write header is set to clear, the value of this header must be set to zero.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileUploadRangeResponse>
     */
    uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options?: Models.FileUploadRangeOptionalParams): Promise<Models.FileUploadRangeResponse>;
    /**
     * @param range Specifies the range of bytes to be written. Both the start and end of the range
     * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear
     * operation, the range can be up to the value of the file's full size. The File service accepts
     * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be
     * specified in the following format: bytes=startByte-endByte.
     * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified
     * by the request body into the specified range. The Range and Content-Length headers must match to
     * perform the update. - Clear: Clears the specified range and releases the space used in storage
     * for that range. To clear a range, set the Content-Length header to zero, and set the Range
     * header to a value that indicates the range to clear, up to maximum file size. Possible values
     * include: 'update', 'clear'
     * @param contentLength Specifies the number of bytes being transmitted in the request body. When
     * the x-ms-write header is set to clear, the value of this header must be set to zero.
     * @param callback The callback
     */
    uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param range Specifies the range of bytes to be written. Both the start and end of the range
     * must be specified. For an update operation, the range can be up to 4 MB in size. For a clear
     * operation, the range can be up to the value of the file's full size. The File service accepts
     * only a single byte range for the Range and 'x-ms-range' headers, and the byte range must be
     * specified in the following format: bytes=startByte-endByte.
     * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified
     * by the request body into the specified range. The Range and Content-Length headers must match to
     * perform the update. - Clear: Clears the specified range and releases the space used in storage
     * for that range. To clear a range, set the Content-Length header to zero, and set the Range
     * header to a value that indicates the range to clear, up to maximum file size. Possible values
     * include: 'update', 'clear'
     * @param contentLength Specifies the number of bytes being transmitted in the request body. When
     * the x-ms-write header is set to clear, the value of this header must be set to zero.
     * @param options The optional parameters
     * @param callback The callback
     */
    uploadRange(range: string, fileRangeWrite: Models.FileRangeWriteType, contentLength: number, options: Models.FileUploadRangeOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Upload a range of bytes to a file where the contents are read from a URL.
     * @param range Writes data to the specified byte range in the file.
     * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a
     * file to another file within the same storage account, you may use Shared Key to authenticate the
     * source file. If you are copying a file from another storage account, or if you are copying a
     * blob from the same storage account or another storage account, then you must authenticate the
     * source file or blob using a shared access signature. If the source is a public blob, no
     * authentication is required to perform the copy operation. A file in a share snapshot can also be
     * specified as a copy source.
     * @param contentLength Specifies the number of bytes being transmitted in the request body. When
     * the x-ms-write header is set to clear, the value of this header must be set to zero.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileUploadRangeFromURLResponse>
     */
    uploadRangeFromURL(range: string, copySource: string, contentLength: number, options?: Models.FileUploadRangeFromURLOptionalParams): Promise<Models.FileUploadRangeFromURLResponse>;
    /**
     * @param range Writes data to the specified byte range in the file.
     * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a
     * file to another file within the same storage account, you may use Shared Key to authenticate the
     * source file. If you are copying a file from another storage account, or if you are copying a
     * blob from the same storage account or another storage account, then you must authenticate the
     * source file or blob using a shared access signature. If the source is a public blob, no
     * authentication is required to perform the copy operation. A file in a share snapshot can also be
     * specified as a copy source.
     * @param contentLength Specifies the number of bytes being transmitted in the request body. When
     * the x-ms-write header is set to clear, the value of this header must be set to zero.
     * @param callback The callback
     */
    uploadRangeFromURL(range: string, copySource: string, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param range Writes data to the specified byte range in the file.
     * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a
     * file to another file within the same storage account, you may use Shared Key to authenticate the
     * source file. If you are copying a file from another storage account, or if you are copying a
     * blob from the same storage account or another storage account, then you must authenticate the
     * source file or blob using a shared access signature. If the source is a public blob, no
     * authentication is required to perform the copy operation. A file in a share snapshot can also be
     * specified as a copy source.
     * @param contentLength Specifies the number of bytes being transmitted in the request body. When
     * the x-ms-write header is set to clear, the value of this header must be set to zero.
     * @param options The optional parameters
     * @param callback The callback
     */
    uploadRangeFromURL(range: string, copySource: string, contentLength: number, options: Models.FileUploadRangeFromURLOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Returns the list of valid ranges for a file.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileGetRangeListResponse>
     */
    getRangeList(options?: Models.FileGetRangeListOptionalParams): Promise<Models.FileGetRangeListResponse>;
    /**
     * @param callback The callback
     */
    getRangeList(callback: coreHttp.ServiceCallback<Models.Range[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getRangeList(options: Models.FileGetRangeListOptionalParams, callback: coreHttp.ServiceCallback<Models.Range[]>): void;
    /**
     * Copies a blob or file to a destination file within the storage account.
     * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a
     * file to another file within the same storage account, you may use Shared Key to authenticate the
     * source file. If you are copying a file from another storage account, or if you are copying a
     * blob from the same storage account or another storage account, then you must authenticate the
     * source file or blob using a shared access signature. If the source is a public blob, no
     * authentication is required to perform the copy operation. A file in a share snapshot can also be
     * specified as a copy source.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileStartCopyResponse>
     */
    startCopy(copySource: string, options?: Models.FileStartCopyOptionalParams): Promise<Models.FileStartCopyResponse>;
    /**
     * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a
     * file to another file within the same storage account, you may use Shared Key to authenticate the
     * source file. If you are copying a file from another storage account, or if you are copying a
     * blob from the same storage account or another storage account, then you must authenticate the
     * source file or blob using a shared access signature. If the source is a public blob, no
     * authentication is required to perform the copy operation. A file in a share snapshot can also be
     * specified as a copy source.
     * @param callback The callback
     */
    startCopy(copySource: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a
     * file to another file within the same storage account, you may use Shared Key to authenticate the
     * source file. If you are copying a file from another storage account, or if you are copying a
     * blob from the same storage account or another storage account, then you must authenticate the
     * source file or blob using a shared access signature. If the source is a public blob, no
     * authentication is required to perform the copy operation. A file in a share snapshot can also be
     * specified as a copy source.
     * @param options The optional parameters
     * @param callback The callback
     */
    startCopy(copySource: string, options: Models.FileStartCopyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Aborts a pending Copy File operation, and leaves a destination file with zero length and full
     * metadata.
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileAbortCopyResponse>
     */
    abortCopy(copyId: string, options?: Models.FileAbortCopyOptionalParams): Promise<Models.FileAbortCopyResponse>;
    /**
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File
     * operation.
     * @param callback The callback
     */
    abortCopy(copyId: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File
     * operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    abortCopy(copyId: string, options: Models.FileAbortCopyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Lists handles for file
     * @param [options] The optional parameters
     * @returns Promise<Models.FileListHandlesResponse>
     */
    listHandles(options?: Models.FileListHandlesOptionalParams): Promise<Models.FileListHandlesResponse>;
    /**
     * @param callback The callback
     */
    listHandles(callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listHandles(options: Models.FileListHandlesOptionalParams, callback: coreHttp.ServiceCallback<Models.ListHandlesResponse>): void;
    /**
     * Closes all handles open for given file
     * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)
     * is a wildcard that specifies all handles.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileForceCloseHandlesResponse>
     */
    forceCloseHandles(handleId: string, options?: Models.FileForceCloseHandlesOptionalParams): Promise<Models.FileForceCloseHandlesResponse>;
    /**
     * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)
     * is a wildcard that specifies all handles.
     * @param callback The callback
     */
    forceCloseHandles(handleId: string, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterix (‘*’)
     * is a wildcard that specifies all handles.
     * @param options The optional parameters
     * @param callback The callback
     */
    forceCloseHandles(handleId: string, options: Models.FileForceCloseHandlesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
}
//# sourceMappingURL=file.d.ts.map
