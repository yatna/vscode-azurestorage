/// <reference types="node" />
import { HttpResponse } from "@azure/core-http";
import { CopyStatusType, FileDownloadHeaders, FileDownloadResponseModel, LeaseDurationType, LeaseStateType, LeaseStatusType } from "./generatedModels";
import { Metadata } from "./models";
import { ReadableStreamGetter, RetriableReadableStreamOptions } from "./utils/RetriableReadableStream";
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * FileDownloadResponse implements the `FileDownloadResponseModel` interface, and in a Node.js runtime it will
 * automatically retry when its internal read stream unexpectedly ends. (This kind of unexpected end cannot
 * trigger retries defined in the pipeline retry policy.)
 *
 * The {@link readableStreamBody} stream will retry beneath the `ReadableStream` layer, so you can just use it as
 * a normal Node.js Readable stream.
 *
 * @export
 * @class FileDownloadResponse
 * @implements {FileDownloadResponseModel}
 */
export declare class FileDownloadResponse implements FileDownloadResponseModel {
    readonly acceptRanges: string | undefined;
    readonly cacheControl: string | undefined;
    readonly contentDisposition: string | undefined;
    readonly contentEncoding: string | undefined;
    readonly contentLanguage: string | undefined;
    readonly contentLength: number | undefined;
    readonly contentMD5: Uint8Array | undefined;
    readonly contentRange: string | undefined;
    readonly contentType: string | undefined;
    readonly copyCompletedOn: Date | undefined;
    readonly copyId: string | undefined;
    readonly copyProgress: string | undefined;
    readonly copySource: string | undefined;
    readonly copyStatus: CopyStatusType | undefined;
    readonly copyStatusDescription: string | undefined;
    readonly date: Date | undefined;
    readonly etag: string | undefined;
    readonly errorCode: string | undefined;
    readonly fileContentMD5: Uint8Array | undefined;
    readonly isServerEncrypted: boolean | undefined;
    readonly lastModified: Date | undefined;
    readonly metadata: Metadata | undefined;
    readonly requestId: string | undefined;
    readonly version: string | undefined;
    readonly fileAttributes: string | undefined;
    readonly fileCreatedOn: Date | undefined;
    readonly fileLastWriteOn: Date | undefined;
    readonly fileChangeOn: Date | undefined;
    readonly filePermissionKey: string | undefined;
    readonly fileId: string | undefined;
    readonly fileParentId: string | undefined;
    readonly contentAsBlob: Promise<Blob> | undefined;
    readonly leaseDuration: LeaseDurationType | undefined;
    readonly leaseState: LeaseStateType | undefined;
    readonly leaseStatus: LeaseStatusType | undefined;
    readonly readableStreamBody: NodeJS.ReadableStream | undefined;
    readonly _response: HttpResponse & {
        parsedHeaders: FileDownloadHeaders;
    };
    private originalResponse;
    private fileDownloadStream?;
    /**
     * Creates an instance of FileDownloadResponse.
     *
     * @param {FileDownloadResponseModel} originalResponse
     * @param {ReadableStreamGetter} getter
     * @param {number} offset
     * @param {number} count
     * @param {RetriableReadableStreamOptions} [options={}]
     * @memberof FileDownloadResponse
     */
    constructor(originalResponse: FileDownloadResponseModel, getter: ReadableStreamGetter, offset: number, count: number, options?: RetriableReadableStreamOptions);
}
//# sourceMappingURL=FileDownloadResponse.d.ts.map
