"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const callWithTelemetryAndErrorHandling_1 = require("./callWithTelemetryAndErrorHandling");
const extensionVariables_1 = require("./extensionVariables");
const AzExtTreeItem_1 = require("./treeDataProvider/AzExtTreeItem");
// tslint:disable:no-any no-unsafe-any
function registerCommand(commandId, callback, debounce) {
    let lastClickTime; /* Used for debounce */
    extensionVariables_1.ext.context.subscriptions.push(vscode_1.commands.registerCommand(commandId, (...args) => __awaiter(this, void 0, void 0, function* () {
        // tslint:disable-next-line:strict-boolean-expressions
        if (debounce) { /* Only check for debounce if registered command specifies */
            if (debounceCommand(debounce, lastClickTime)) {
                return;
            }
            lastClickTime = Date.now();
        }
        return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling(commandId, (context) => {
            if (args.length > 0) {
                const firstArg = args[0];
                if (firstArg instanceof AzExtTreeItem_1.AzExtTreeItem) {
                    context.telemetry.properties.contextValue = firstArg.contextValue;
                }
                else if (firstArg instanceof vscode_1.Uri) {
                    context.telemetry.properties.contextValue = 'Uri';
                }
            }
            return callback(context, ...args);
        });
    })));
}
exports.registerCommand = registerCommand;
function registerEvent(eventId, event, callback) {
    extensionVariables_1.ext.context.subscriptions.push(event((...args) => __awaiter(this, void 0, void 0, function* () {
        return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling(eventId, (context) => {
            return callback(context, ...args);
        });
    })));
}
exports.registerEvent = registerEvent;
function debounceCommand(debounce, lastClickTime) {
    // tslint:disable-next-line:strict-boolean-expressions
    if (lastClickTime && lastClickTime + debounce > Date.now()) {
        return true;
    }
    return false;
}
//# sourceMappingURL=AzureActionHandler.js.map