"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const errors_1 = require("../errors");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const AzureWizardPromptStep_1 = require("../wizard/AzureWizardPromptStep");
const AzExtParentTreeItem_1 = require("./AzExtParentTreeItem");
const GenericTreeItem_1 = require("./GenericTreeItem");
const IconPath_1 = require("./IconPath");
const SubscriptionTreeItemBase_1 = require("./SubscriptionTreeItemBase");
const signInLabel = localize_1.localize('signInLabel', 'Sign in to Azure...');
const createAccountLabel = localize_1.localize('createAccountLabel', 'Create a Free Azure Account...');
const selectSubscriptionsLabel = localize_1.localize('noSubscriptions', 'Select Subscriptions...');
const signInCommandId = 'azure-account.login';
const createAccountCommandId = 'azure-account.createAccount';
const selectSubscriptionsCommandId = 'azure-account.selectSubscriptions';
const azureAccountExtensionId = 'ms-vscode.azure-account';
const extensionOpenCommand = 'extension.open';
class AzureAccountTreeItemBase extends AzExtParentTreeItem_1.AzExtParentTreeItem {
    constructor(parent, testAccount) {
        super(parent);
        this.contextValue = AzureAccountTreeItemBase.contextValue;
        this.label = 'Azure';
        this.childTypeLabel = localize_1.localize('subscription', 'subscription');
        this.autoSelectInTreeItemPicker = true;
        this.disposables = [];
        this._testAccount = testAccount;
        this._azureAccountTask = this.loadAzureAccount(testAccount);
    }
    //#endregion
    get iconPath() {
        return IconPath_1.getIconPath('azure');
    }
    dispose() {
        vscode_1.Disposable.from(...this.disposables).dispose();
    }
    hasMoreChildrenImpl() {
        return false;
    }
    loadMoreChildrenImpl(_clearCache, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let azureAccount = yield this._azureAccountTask;
            if (!azureAccount) {
                // Refresh the AzureAccount, to handle Azure account extension installation after the previous refresh
                this._azureAccountTask = this.loadAzureAccount(this._testAccount);
                azureAccount = yield this._azureAccountTask;
            }
            if (!azureAccount) {
                context.telemetry.properties.accountStatus = 'notInstalled';
                const label = localize_1.localize('installAzureAccount', 'Install Azure Account Extension...');
                const result = new GenericTreeItem_1.GenericTreeItem(this, { label, commandId: extensionOpenCommand, contextValue: 'installAzureAccount', includeInTreeItemPicker: true });
                result.commandArgs = [azureAccountExtensionId];
                return [result];
            }
            context.telemetry.properties.accountStatus = azureAccount.status;
            const existingSubscriptions = this._subscriptionTreeItems ? this._subscriptionTreeItems : [];
            this._subscriptionTreeItems = [];
            const contextValue = 'azureCommand';
            if (azureAccount.status === 'Initializing' || azureAccount.status === 'LoggingIn') {
                return [new GenericTreeItem_1.GenericTreeItem(this, {
                        label: azureAccount.status === 'Initializing' ? localize_1.localize('loadingTreeItem', 'Loading...') : localize_1.localize('signingIn', 'Waiting for Azure sign-in...'),
                        commandId: signInCommandId,
                        contextValue,
                        id: signInCommandId,
                        iconPath: IconPath_1.getThemedIconPath('Loading')
                    })];
            }
            else if (azureAccount.status === 'LoggedOut') {
                return [
                    new GenericTreeItem_1.GenericTreeItem(this, { label: signInLabel, commandId: signInCommandId, contextValue, id: signInCommandId, iconPath: IconPath_1.getThemedIconPath('signIn'), includeInTreeItemPicker: true }),
                    new GenericTreeItem_1.GenericTreeItem(this, { label: createAccountLabel, commandId: createAccountCommandId, contextValue, id: createAccountCommandId, iconPath: IconPath_1.getThemedIconPath('add'), includeInTreeItemPicker: true })
                ];
            }
            yield azureAccount.waitForFilters();
            if (azureAccount.filters.length === 0) {
                return [
                    new GenericTreeItem_1.GenericTreeItem(this, { label: selectSubscriptionsLabel, commandId: selectSubscriptionsCommandId, contextValue, id: selectSubscriptionsCommandId, includeInTreeItemPicker: true })
                ];
            }
            else {
                this._subscriptionTreeItems = yield Promise.all(azureAccount.filters.map((filter) => __awaiter(this, void 0, void 0, function* () {
                    const existingTreeItem = existingSubscriptions.find(ti => ti.id === filter.subscription.id);
                    if (existingTreeItem) {
                        // Return existing treeItem (which might have many 'cached' tree items underneath it) rather than creating a brand new tree item every time
                        return existingTreeItem;
                    }
                    else {
                        // filter.subscription.id is the The fully qualified ID of the subscription (For example, /subscriptions/00000000-0000-0000-0000-000000000000) and should be used as the tree item's id for the purposes of OpenInPortal
                        // filter.subscription.subscriptionId is just the guid and is used in all other cases when creating clients for managing Azure resources
                        return yield this.createSubscriptionTreeItem({
                            credentials: filter.session.credentials,
                            subscriptionDisplayName: nonNull_1.nonNullProp(filter.subscription, 'displayName'),
                            subscriptionId: nonNull_1.nonNullProp(filter.subscription, 'subscriptionId'),
                            subscriptionPath: nonNull_1.nonNullProp(filter.subscription, 'id'),
                            tenantId: filter.session.tenantId,
                            userId: filter.session.userId,
                            environment: filter.session.environment
                        });
                    }
                })));
                return this._subscriptionTreeItems;
            }
        });
    }
    getSubscriptionPromptStep(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscriptions = yield this.ensureSubscriptionTreeItems(context);
            if (subscriptions.length === 1) {
                Object.assign(context, subscriptions[0].root);
                return undefined;
            }
            else {
                // tslint:disable-next-line: no-var-self
                const me = this;
                class SubscriptionPromptStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
                    prompt() {
                        return __awaiter(this, void 0, void 0, function* () {
                            const ti = yield me.treeDataProvider.showTreeItemPicker(SubscriptionTreeItemBase_1.SubscriptionTreeItemBase.contextValue, context, me);
                            Object.assign(context, ti.root);
                        });
                    }
                    shouldPrompt() { return !context.subscriptionId; }
                }
                return new SubscriptionPromptStep();
            }
        });
    }
    pickTreeItemImpl(_expectedContextValues) {
        return __awaiter(this, void 0, void 0, function* () {
            const azureAccount = yield this._azureAccountTask;
            if (azureAccount && (azureAccount.status === 'LoggingIn' || azureAccount.status === 'Initializing')) {
                const title = localize_1.localize('waitingForAzureSignin', 'Waiting for Azure sign-in...');
                // tslint:disable-next-line: no-non-null-assertion
                yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, title }, () => __awaiter(this, void 0, void 0, function* () { return yield azureAccount.waitForSubscriptions(); }));
            }
            return undefined;
        });
    }
    compareChildrenImpl(item1, item2) {
        if (item1 instanceof GenericTreeItem_1.GenericTreeItem && item2 instanceof GenericTreeItem_1.GenericTreeItem) {
            return 0; // already sorted
        }
        else {
            return super.compareChildrenImpl(item1, item2);
        }
    }
    loadAzureAccount(azureAccount) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!azureAccount) {
                const extension = vscode_1.extensions.getExtension(azureAccountExtensionId);
                if (extension) {
                    if (!extension.isActive) {
                        yield extension.activate();
                    }
                    azureAccount = extension.exports;
                }
            }
            if (azureAccount) {
                this.disposables.push(azureAccount.onFiltersChanged(() => __awaiter(this, void 0, void 0, function* () { return yield this.refresh(); })));
                this.disposables.push(azureAccount.onStatusChanged((status) => __awaiter(this, void 0, void 0, function* () {
                    // Ignore status change to 'LoggedIn' and wait for the 'onFiltersChanged' event to fire instead
                    // (so that the tree stays in 'Loading...' state until the filters are actually ready)
                    if (status !== 'LoggedIn') {
                        yield this.refresh();
                    }
                })));
                yield vscode_1.commands.executeCommand('setContext', 'isAzureAccountInstalled', true);
            }
            return azureAccount;
        });
    }
    ensureSubscriptionTreeItems(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const azureAccount = yield this._azureAccountTask;
            if (!azureAccount) {
                context.telemetry.properties.cancelStep = 'requiresAzureAccount';
                const message = localize_1.localize('requiresAzureAccount', "This functionality requires installing the Azure Account extension.");
                const viewInMarketplace = { title: localize_1.localize('viewInMarketplace', "View in Marketplace") };
                if ((yield extensionVariables_1.ext.ui.showWarningMessage(message, viewInMarketplace)) === viewInMarketplace) {
                    yield vscode_1.commands.executeCommand(extensionOpenCommand, azureAccountExtensionId);
                }
                throw new errors_1.UserCancelledError();
            }
            if (!this._subscriptionTreeItems) {
                yield this.getCachedChildren(context);
            }
            return nonNull_1.nonNullValue(this._subscriptionTreeItems, 'subscriptionTreeItems');
        });
    }
}
exports.AzureAccountTreeItemBase = AzureAccountTreeItemBase;
AzureAccountTreeItemBase.contextValue = 'azureextensionui.azureAccount';
//# sourceMappingURL=AzureAccountTreeItemBase.js.map