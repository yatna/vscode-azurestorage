"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const IconPath_1 = require("./IconPath");
const InternalInterfaces_1 = require("./InternalInterfaces");
class AzExtTreeItem {
    constructor(parent) {
        this.parent = parent;
    }
    get _effectiveDescription() {
        return this._temporaryDescription || this.description;
    }
    get fullId() {
        if (this.parent === undefined) {
            return ''; // root tree item should not have an id since it's not actually displayed
        }
        else {
            let id = this.id || this.label;
            if (!id.startsWith('/')) {
                id = `/${id}`;
            }
            // For the sake of backwards compat, only add the parent's id if it's not already there
            if (!id.startsWith(this.parent.fullId)) {
                id = `${this.parent.fullId}${id}`;
            }
            return id;
        }
    }
    get effectiveIconPath() {
        return this._temporaryDescription || this._isLoadingMore ? IconPath_1.getThemedIconPath('Loading') : this.iconPath;
    }
    get effectiveLabel() {
        return this._effectiveDescription ? `${this.label} (${this._effectiveDescription})` : this.label;
    }
    get treeDataProvider() {
        // tslint:disable-next-line: strict-boolean-expressions
        return this._treeDataProvider || nonNull_1.nonNullProp(this, 'parent').treeDataProvider;
    }
    set treeDataProvider(val) {
        this._treeDataProvider = val;
    }
    //#endregion
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.treeDataProvider.refresh(this);
        });
    }
    matchesContextValue(expectedContextValues) {
        return expectedContextValues.some((val) => {
            return this.contextValue === val || (val instanceof RegExp && val.test(this.contextValue));
        });
    }
    includeInTreePicker(expectedContextValues) {
        if (this.matchesContextValue(expectedContextValues)) {
            return true;
        }
        return expectedContextValues.some((val) => {
            if (this.isAncestorOfImpl) {
                return this.isAncestorOfImpl(val);
            }
            else {
                return InternalInterfaces_1.isAzExtParentTreeItem(this);
            }
        });
    }
    deleteTreeItem(context) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runWithTemporaryDescription(localize_1.localize('deleting', 'Deleting...'), () => __awaiter(this, void 0, void 0, function* () {
                if (this.deleteTreeItemImpl) {
                    yield this.deleteTreeItemImpl(context);
                    if (this.parent) {
                        this.parent.removeChildFromCache(this);
                    }
                }
                else {
                    throw new errors_1.NotImplementedError('deleteTreeItemImpl', this);
                }
            }));
        });
    }
    runWithTemporaryDescription(description, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this._temporaryDescription = description;
            try {
                this.treeDataProvider.refreshUIOnly(this);
                yield callback();
            }
            finally {
                this._temporaryDescription = undefined;
                yield this.refresh();
            }
        });
    }
}
exports.AzExtTreeItem = AzExtTreeItem;
//# sourceMappingURL=AzExtTreeItem.js.map