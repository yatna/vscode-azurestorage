"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const localize_1 = require("../localize");
function runWithLoadingNotification(context, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, cancellable: true }, (progress, cancellationToken) => __awaiter(this, void 0, void 0, function* () {
            const message = context.loadingMessage || localize_1.localize('loadingAll', 'Loading resources...');
            const messageDelay = context.loadingMessageDelay !== undefined ? context.loadingMessageDelay : 2;
            const timer = setTimeout(() => progress.report({ message }), messageDelay * 1000);
            try {
                return yield callback(cancellationToken);
            }
            finally {
                clearTimeout(timer);
            }
        }));
    });
}
exports.runWithLoadingNotification = runWithLoadingNotification;
//# sourceMappingURL=runWithLoadingNotification.js.map