"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
const DialogResponses_1 = require("./DialogResponses");
const errors_1 = require("./errors");
const localize_1 = require("./localize");
const inputValidation_1 = require("./utils/inputValidation");
const openUrl_1 = require("./utils/openUrl");
const randomUtils_1 = require("./utils/randomUtils");
class AzureUserInput {
    constructor(persistence) {
        this._onDidFinishPromptEmitter = new vscode.EventEmitter();
        this._persistence = persistence;
    }
    get onDidFinishPrompt() {
        return this._onDidFinishPromptEmitter.event;
    }
    get _rootUserInput() {
        // If the current wizard is already prompting, that means the user started a new action outside the wizard and we should fall back to `vscode.window`
        // https://github.com/microsoft/vscode-azurefunctions/issues/1461
        return this.wizardUserInput && !this.wizardUserInput.isPrompting ? this.wizardUserInput : vscode.window;
    }
    showQuickPick(items, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.ignoreFocusOut === undefined) {
                options.ignoreFocusOut = true;
            }
            let persistenceKey;
            const unhashedKey = options.id || options.placeHolder;
            if (unhashedKey && !options.canPickMany) {
                persistenceKey = `showQuickPick.${randomUtils_1.randomUtils.getPseudononymousStringHash(unhashedKey)}`;
            }
            if (options.canPickMany && options.placeHolder) {
                options.placeHolder += localize_1.localize('canPickManyInstructions', " (Press 'Space' to select and 'Enter' to confirm)");
            }
            const result = yield this._rootUserInput.showQuickPick(this.getOrderedItems(items, persistenceKey, options.suppressPersistence), options);
            if (result === undefined) {
                throw new errors_1.UserCancelledError();
            }
            if (!Array.isArray(result) && persistenceKey && !result.suppressPersistence) {
                this._persistence.update(persistenceKey, getPersistenceValue(result));
            }
            this._onDidFinishPromptEmitter.fire(result);
            return result;
        });
    }
    showInputBox(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.ignoreFocusOut === undefined) {
                options.ignoreFocusOut = true;
            }
            // tslint:disable-next-line:typedef
            const validateInput = options.validateInput;
            if (validateInput) {
                options.validateInput = (v) => __awaiter(this, void 0, void 0, function* () { return inputValidation_1.validOnTimeoutOrException(() => __awaiter(this, void 0, void 0, function* () { return yield validateInput(v); })); });
            }
            const result = yield this._rootUserInput.showInputBox(options);
            if (result === undefined) {
                throw new errors_1.UserCancelledError();
            }
            else {
                this._onDidFinishPromptEmitter.fire(result);
                return result;
            }
        });
    }
    // tslint:disable-next-line:no-any
    showWarningMessage(message, ...args) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const learnMoreLink = args[0] && args[0].learnMoreLink;
            if (learnMoreLink) {
                args.push(DialogResponses_1.DialogResponses.learnMore);
            }
            const back = { title: localize_1.localize('back', 'Back') };
            if ((_a = this.wizardUserInput) === null || _a === void 0 ? void 0 : _a.showBackButton) {
                args.push(back);
            }
            // tslint:disable-next-line: no-constant-condition
            while (true) {
                // tslint:disable-next-line:no-unsafe-any
                const result = yield vscode.window.showWarningMessage(message, ...args);
                if (learnMoreLink && result === DialogResponses_1.DialogResponses.learnMore) {
                    yield openUrl_1.openUrl(learnMoreLink);
                }
                else if (result === undefined || result === DialogResponses_1.DialogResponses.cancel) {
                    throw new errors_1.UserCancelledError();
                }
                else if (result === back) {
                    throw new errors_1.GoBackError();
                }
                else {
                    this._onDidFinishPromptEmitter.fire(result);
                    return result;
                }
            }
        });
    }
    showOpenDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield vscode.window.showOpenDialog(options);
            if (result === undefined || result.length === 0) {
                throw new errors_1.UserCancelledError();
            }
            else {
                this._onDidFinishPromptEmitter.fire(result);
                return result;
            }
        });
    }
    /**
     * See if the previous value selected by the user is in the list, and move it to the top as default
     */
    getOrderedItems(items, persistenceKey, suppressPersistence) {
        return __awaiter(this, void 0, void 0, function* () {
            items = yield Promise.resolve(items);
            if (persistenceKey && !suppressPersistence) {
                const previousValue = this._persistence.get(persistenceKey);
                if (previousValue) {
                    const index = items.findIndex((item) => getPersistenceValue(item) === previousValue);
                    // No need to do anything if "recently used" item is not found or already the first item
                    if (index > 0) {
                        const previousItem = items.splice(index, 1)[0];
                        const recentlyUsed = localize_1.localize('recentlyUsed', '(recently used)');
                        if (!previousItem.description) {
                            previousItem.description = recentlyUsed;
                        }
                        else if (!previousItem.description.includes(recentlyUsed)) {
                            previousItem.description = `${previousItem.description} ${recentlyUsed}`;
                        }
                        items.unshift(previousItem);
                    }
                }
            }
            return items;
        });
    }
}
exports.AzureUserInput = AzureUserInput;
function getPersistenceValue(item) {
    return randomUtils_1.randomUtils.getPseudononymousStringHash(item.id || item.label);
}
//# sourceMappingURL=AzureUserInput.js.map