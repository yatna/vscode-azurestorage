"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_resource_1 = require("azure-arm-resource");
const createAzureClient_1 = require("../createAzureClient");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const AzureWizardPromptStep_1 = require("./AzureWizardPromptStep");
function generalizeLocationName(name) {
    // tslint:disable-next-line:strict-boolean-expressions
    return (name || '').toLowerCase().replace(/\s/g, '');
}
class LocationListStep extends AzureWizardPromptStep_1.AzureWizardPromptStep {
    constructor() {
        super();
    }
    static addStep(wizardContext, promptSteps) {
        if (!wizardContext._alreadyHasLocationStep) {
            promptSteps.push(new LocationListStep());
            wizardContext._alreadyHasLocationStep = true;
        }
    }
    static setLocation(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const locations = yield LocationListStep.getLocations(wizardContext);
            name = generalizeLocationName(name);
            wizardContext.location = locations.find((l) => {
                return name === generalizeLocationName(l.name) || name === generalizeLocationName(l.displayName);
            });
        });
    }
    static getLocations(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (wizardContext._allLocationsTask === undefined) {
                const client = createAzureClient_1.createAzureSubscriptionClient(wizardContext, azure_arm_resource_1.SubscriptionClient);
                wizardContext._allLocationsTask = client.subscriptions.listLocations(wizardContext.subscriptionId);
            }
            const allLocations = yield wizardContext._allLocationsTask;
            if (wizardContext.locationsTask === undefined) {
                return allLocations;
            }
            else {
                const locationsSubset = yield wizardContext.locationsTask;
                return allLocations.filter(l1 => locationsSubset.find(l2 => generalizeLocationName(l1.name) === generalizeLocationName(l2.name)));
            }
        });
    }
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = { placeHolder: localize_1.localize('selectLocation', 'Select a location for new resources.') };
            wizardContext.location = (yield extensionVariables_1.ext.ui.showQuickPick(this.getQuickPicks(wizardContext), options)).data;
        });
    }
    shouldPrompt(wizardContext) {
        return !wizardContext.location;
    }
    getQuickPicks(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            let locations = yield LocationListStep.getLocations(wizardContext);
            // tslint:disable-next-line:no-non-null-assertion
            locations = locations.sort((l1, l2) => l1.displayName.localeCompare(l2.displayName));
            return locations.map((l) => {
                return {
                    // tslint:disable-next-line:no-non-null-assertion
                    label: nonNull_1.nonNullProp(l, 'displayName'),
                    description: '',
                    data: l
                };
            });
        });
    }
}
exports.LocationListStep = LocationListStep;
//# sourceMappingURL=LocationListStep.js.map