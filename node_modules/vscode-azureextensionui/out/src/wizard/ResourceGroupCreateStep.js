"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_resource_1 = require("azure-arm-resource");
const createAzureClient_1 = require("../createAzureClient");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const parseError_1 = require("../parseError");
const AzureWizardExecuteStep_1 = require("./AzureWizardExecuteStep");
const ResourceGroupListStep_1 = require("./ResourceGroupListStep");
class ResourceGroupCreateStep extends AzureWizardExecuteStep_1.AzureWizardExecuteStep {
    constructor() {
        super(...arguments);
        this.priority = 100;
    }
    execute(wizardContext, progress) {
        return __awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line:no-non-null-assertion
            const newName = wizardContext.newResourceGroupName;
            // tslint:disable-next-line:no-non-null-assertion
            const newLocation = wizardContext.location.name;
            const resourceClient = createAzureClient_1.createAzureClient(wizardContext, azure_arm_resource_1.ResourceManagementClient);
            try {
                const rgExists = yield resourceClient.resourceGroups.checkExistence(newName);
                if (rgExists) {
                    extensionVariables_1.ext.outputChannel.appendLog(localize_1.localize('existingResourceGroup', 'Using existing resource group "{0}".', newName));
                    wizardContext.resourceGroup = yield resourceClient.resourceGroups.get(newName);
                }
                else {
                    const creatingMessage = localize_1.localize('creatingResourceGroup', 'Creating resource group "{0}" in location "{1}"...', newName, newLocation);
                    extensionVariables_1.ext.outputChannel.appendLog(creatingMessage);
                    progress.report({ message: creatingMessage });
                    wizardContext.resourceGroup = yield resourceClient.resourceGroups.createOrUpdate(newName, { location: newLocation });
                    extensionVariables_1.ext.outputChannel.appendLog(localize_1.localize('createdResourceGroup', 'Successfully created resource group "{0}".', newName));
                }
            }
            catch (error) {
                if (wizardContext.suppress403Handling || parseError_1.parseError(error).errorType !== '403') {
                    throw error;
                }
                else {
                    const message = localize_1.localize('rgForbidden', 'You do not have permission to create a resource group in subscription "{0}".', wizardContext.subscriptionDisplayName);
                    const selectExisting = { title: localize_1.localize('selectExisting', 'Select Existing') };
                    wizardContext.telemetry.properties.cancelStep = 'RgNoPermissions';
                    yield extensionVariables_1.ext.ui.showWarningMessage(message, { modal: true }, selectExisting);
                    wizardContext.telemetry.properties.cancelStep = undefined;
                    wizardContext.telemetry.properties.forbiddenResponse = 'SelectExistingRg';
                    const step = new ResourceGroupListStep_1.ResourceGroupListStep(true /* suppressCreate */);
                    yield step.prompt(wizardContext);
                }
            }
        });
    }
    shouldExecute(wizardContext) {
        return !wizardContext.resourceGroup;
    }
}
exports.ResourceGroupCreateStep = ResourceGroupCreateStep;
//# sourceMappingURL=ResourceGroupCreateStep.js.map