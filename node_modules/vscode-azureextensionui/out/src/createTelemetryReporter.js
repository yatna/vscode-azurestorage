"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const process = require("process");
const vscode = require("vscode");
const vscode_extension_telemetry_1 = require("vscode-extension-telemetry");
const DebugReporter_1 = require("./DebugReporter");
const getPackageInfo_1 = require("./getPackageInfo");
// tslint:disable-next-line:strict-boolean-expressions
const debugTelemetryEnabled = !/^(false|0)?$/i.test(process.env.DEBUGTELEMETRY || '');
// tslint:disable-next-line:strict-boolean-expressions
const debugTelemetryVerbose = /^(verbose|v)$/i.test(process.env.DEBUGTELEMETRY || '');
function createTelemetryReporter(ctx) {
    const { extensionName, extensionVersion, aiKey } = getPackageInfo_1.getPackageInfo(ctx);
    let newReporter;
    if (debugTelemetryEnabled) {
        console.warn(`${extensionName}: DEBUGTELEMETRY mode enabled (${debugTelemetryVerbose ? 'verbose' : 'quiet'}) - not sending telemetry`);
        newReporter = new DebugReporter_1.DebugReporter(extensionName, extensionVersion, debugTelemetryVerbose);
    }
    else {
        const reporter = new vscode_extension_telemetry_1.default(extensionName, extensionVersion, aiKey);
        ctx.subscriptions.push(reporter);
        newReporter = reporter;
    }
    // Send an event with some general info
    newReporter.sendTelemetryErrorEvent('info', { isActivationEvent: 'true', product: vscode.env.appName, language: vscode.env.language }, undefined, []);
    return newReporter;
}
exports.createTelemetryReporter = createTelemetryReporter;
//# sourceMappingURL=createTelemetryReporter.js.map