"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE.md in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const vscode_1 = require("vscode");
const extensionVariables_1 = require("./extensionVariables");
const nonNull_1 = require("./utils/nonNull");
const randomUtils_1 = require("./utils/randomUtils");
let contentProvider;
const scheme = 'azureextensionuiReadonly';
function openReadOnlyJson(node, data) {
    return __awaiter(this, void 0, void 0, function* () {
        let tab = '	';
        const config = vscode_1.workspace.getConfiguration('editor');
        const insertSpaces = !!config.get('insertSpaces');
        if (insertSpaces) {
            let tabSize = config.get('tabSize');
            if (!util_1.isNumber(tabSize) || tabSize < 0) {
                tabSize = 4;
            }
            tab = ' '.repeat(tabSize);
        }
        const content = JSON.stringify(data, undefined, tab);
        yield openReadOnlyContent(node, content, '.json');
    });
}
exports.openReadOnlyJson = openReadOnlyJson;
function openReadOnlyContent(node, content, fileExtension) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!contentProvider) {
            contentProvider = new ReadOnlyContentProvider();
            extensionVariables_1.ext.context.subscriptions.push(vscode_1.workspace.registerTextDocumentContentProvider(scheme, contentProvider));
        }
        yield contentProvider.openReadOnlyContent(node, content, fileExtension);
    });
}
exports.openReadOnlyContent = openReadOnlyContent;
class ReadOnlyContentProvider {
    constructor() {
        this._onDidChangeEmitter = new vscode_1.EventEmitter();
        this._contentMap = new Map();
    }
    get onDidChange() {
        return this._onDidChangeEmitter.event;
    }
    openReadOnlyContent(node, content, fileExtension) {
        return __awaiter(this, void 0, void 0, function* () {
            const idHash = randomUtils_1.randomUtils.getPseudononymousStringHash(node.fullId, 'hex');
            const uri = vscode_1.Uri.parse(`${scheme}:///${idHash}/${node.label}${fileExtension}`);
            this._contentMap.set(uri.toString(), content);
            yield vscode_1.window.showTextDocument(uri);
            this._onDidChangeEmitter.fire(uri);
        });
    }
    provideTextDocumentContent(uri, _token) {
        return __awaiter(this, void 0, void 0, function* () {
            return nonNull_1.nonNullValue(this._contentMap.get(uri.toString()), 'ReadOnlyContentProvider._contentMap.get');
        });
    }
}
//# sourceMappingURL=openReadOnlyContent.js.map