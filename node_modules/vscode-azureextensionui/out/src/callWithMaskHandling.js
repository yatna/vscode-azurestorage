"use strict";
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const escape = require("escape-string-regexp");
const parseError_1 = require("./parseError");
function callWithMaskHandling(callback, valueToMask) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield callback();
        }
        catch (error) {
            const parsedError = parseError_1.parseError(error);
            if (parsedError.isUserCancelledError) {
                throw error;
            }
            const maskedMessage = valueToMask ?
                parsedError.message.replace(new RegExp(escape(valueToMask), 'g'), '***') :
                parsedError.message;
            throw new Error(maskedMessage);
        }
    });
}
exports.callWithMaskHandling = callWithMaskHandling;
//# sourceMappingURL=callWithMaskHandling.js.map