"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const DialogResponses_1 = require("./DialogResponses");
const extensionVariables_1 = require("./extensionVariables");
const localize_1 = require("./localize");
const parseError_1 = require("./parseError");
const reportAnIssue_1 = require("./reportAnIssue");
const textStrings_1 = require("./utils/textStrings");
const maxStackLines = 3;
function initContext() {
    const start = Date.now();
    const context = {
        telemetry: {
            properties: {
                isActivationEvent: 'false',
                cancelStep: '',
                result: 'Succeeded',
                stack: '',
                error: '',
                errorMessage: ''
            },
            measurements: {
                duration: 0
            },
            suppressIfSuccessful: false,
            suppressAll: false
        },
        errorHandling: {
            suppressDisplay: false,
            rethrow: false,
            issueProperties: {}
        }
    };
    return [start, context];
}
function callWithTelemetryAndErrorHandlingSync(callbackId, callback) {
    const [start, context] = initContext();
    try {
        return callback(context);
    }
    catch (error) {
        handleError(context, callbackId, error);
        return undefined;
    }
    finally {
        handleTelemetry(context, callbackId, start);
    }
}
exports.callWithTelemetryAndErrorHandlingSync = callWithTelemetryAndErrorHandlingSync;
function callWithTelemetryAndErrorHandling(callbackId, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const [start, context] = initContext();
        try {
            return yield Promise.resolve(callback(context));
        }
        catch (error) {
            handleError(context, callbackId, error);
            return undefined;
        }
        finally {
            handleTelemetry(context, callbackId, start);
        }
    });
}
exports.callWithTelemetryAndErrorHandling = callWithTelemetryAndErrorHandling;
const errorHandlers = {};
const telemetryHandlers = {};
function registerErrorHandler(handler) {
    return registerHandler(handler, errorHandlers);
}
exports.registerErrorHandler = registerErrorHandler;
function registerTelemetryHandler(handler) {
    return registerHandler(handler, telemetryHandlers);
}
exports.registerTelemetryHandler = registerTelemetryHandler;
let handlerCount = 0;
function registerHandler(handler, handlers) {
    handlerCount += 1;
    const id = handlerCount;
    handlers[id] = handler;
    return {
        dispose: () => {
            delete handlers[id];
        }
    };
}
function handleError(context, callbackId, error) {
    const errorContext = Object.assign(context, { error, callbackId });
    for (const handler of Object.values(errorHandlers)) {
        try {
            handler(errorContext);
        }
        catch (_a) {
            // don't block other handlers
        }
    }
    const errorData = parseError_1.parseError(errorContext.error);
    if (errorData.isUserCancelledError) {
        context.telemetry.properties.result = 'Canceled';
        context.errorHandling.suppressDisplay = true;
        context.errorHandling.rethrow = false;
    }
    else {
        context.telemetry.properties.result = 'Failed';
        context.telemetry.properties.error = errorData.errorType;
        context.telemetry.properties.errorMessage = errorData.message;
        context.telemetry.properties.stack = errorData.stack ? textStrings_1.limitLines(errorData.stack, maxStackLines) : undefined;
        if (context.telemetry.suppressIfSuccessful || context.telemetry.suppressAll) {
            context.telemetry.properties.suppressTelemetry = 'true';
        }
    }
    if (!context.errorHandling.suppressDisplay) {
        // Always append the error to the output channel, but only 'show' the output channel for multiline errors
        extensionVariables_1.ext.outputChannel.appendLog(localize_1.localize('outputError', 'Error: {0}', errorData.message));
        let message;
        if (errorData.message.includes('\n')) {
            extensionVariables_1.ext.outputChannel.show();
            message = localize_1.localize('multilineError', 'An error has occured. Check output window for more details.');
        }
        else {
            message = errorData.message;
        }
        const items = [];
        if (!context.errorHandling.suppressReportIssue) {
            items.push(DialogResponses_1.DialogResponses.reportAnIssue);
        }
        // don't wait
        vscode_1.window.showErrorMessage(message, ...items).then((result) => __awaiter(this, void 0, void 0, function* () {
            if (result === DialogResponses_1.DialogResponses.reportAnIssue) {
                yield reportAnIssue_1.reportAnIssue(errorContext.callbackId, errorData, context.errorHandling.issueProperties);
            }
        }));
    }
    if (context.errorHandling.rethrow) {
        throw errorContext.error;
    }
}
function handleTelemetry(context, callbackId, start) {
    const handlerContext = Object.assign(context, { callbackId });
    for (const handler of Object.values(telemetryHandlers)) {
        try {
            handler(handlerContext);
        }
        catch (_a) {
            // don't block other handlers
        }
    }
    if (!context.telemetry.suppressAll && !(context.telemetry.suppressIfSuccessful && context.telemetry.properties.result === 'Succeeded')) {
        const end = Date.now();
        context.telemetry.measurements.duration = (end - start) / 1000;
        const errorProps = Object.keys(context.telemetry.properties).filter(key => /(error|stack|exception)/i.test(key));
        // Note: The id of the extension is automatically prepended to the given callbackId (e.g. "vscode-cosmosdb/")
        extensionVariables_1.ext._internalReporter.sendTelemetryErrorEvent(handlerContext.callbackId, context.telemetry.properties, context.telemetry.measurements, errorProps);
    }
}
//# sourceMappingURL=callWithTelemetryAndErrorHandling.js.map